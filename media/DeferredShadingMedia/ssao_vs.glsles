#version 100

precision highp float;
precision highp int;
precision lowp sampler2D;
precision lowp samplerCube;

struct VIn
{
    vec4 p   : POSITION;
    vec3 n   : NORMAL;
    vec2 uv  : TEXCOORD0;
};

struct VOut
{
    vec4 p   : POSITION;
    vec2 uv  : TEXCOORD0;
    vec3 ray : TEXCOORD1;
};

struct PIn
{
    vec2 uv  : TEXCOORD0;
    vec3 ray : TEXCOORD1;
};

VOut ssao_vs(VIn IN, uniform mat4 wvp, uniform vec3 farCorner)
{
    VOut OUT;
    OUT.p = mul(wvp, IN.p);
    // clean up inaccuracies for the UV coords
    vec2 uv = sign(IN.p);
    // convert to image space
    uv = (vec2(uv.x, -uv.y) + 1.0) * 0.5;
    OUT.uv = uv;
    // calculate the correct ray (modify XY parameters based on screen-space quad XY)
    OUT.ray = farCorner * vec3(sign(IN.p.xy), 1);
    return OUT;
}
#version 100

precision highp float;
precision highp int;
precision lowp sampler2D;
precision lowp samplerCube;

struct VIn
{
    vec4 p   : POSITION;
    vec3 n   : NORMAL;
    vec2 uv  : TEXCOORD0;
};

struct VOut
{
    vec4 p   : POSITION;
    vec2 uv  : TEXCOORD0;
    vec3 ray : TEXCOORD1;
};

struct PIn
{
    vec2 uv  : TEXCOORD0;
    vec3 ray : TEXCOORD1;
};

VOut ssao_vs(VIn IN, uniform mat4 wvp, uniform vec3 farCorner)
{
    VOut OUT;
    OUT.p = mul(wvp, IN.p);
    // clean up inaccuracies for the UV coords
    vec2 uv = sign(IN.p);
    // convert to image space
    uv = (vec2(uv.x, -uv.y) + 1.0) * 0.5;
    OUT.uv = uv;
    // calculate the correct ray (modify XY parameters based on screen-space quad XY)
    OUT.ray = farCorner * vec3(sign(IN.p.xy), 1);
    return OUT;
}
